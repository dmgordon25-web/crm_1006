// print.js â€” Phase 8
(function(){
  function getField(o,paths){ for(const p of paths){ const parts=p.split('.'); let cur=o; for(const k of parts){ if(cur&&k in cur) cur=cur[k]; else { cur=undefined; break; } } if(cur!=null&&cur!=='') return cur; } return null; }
  function parseMD(s){ if(!s) return null; const m=String(s).trim(); const md = m.match(/^(\d{4})-(\d{2})-(\d{2})$/) || m.match(/^(\d{2})-(\d{2})$/); if(!md) return null; const month = md.length===4? parseInt(md[2],10): parseInt(md[1],10); const day = md.length===4? parseInt(md[3],10): parseInt(md[2],10); if(month<1||month>12||day<1||day>31) return null; return {month,day}; }
  function nextOcc(md,t){ const y=t.getFullYear(); const d=new Date(y,md.month-1,md.day); return (d < new Date(t.getFullYear(),t.getMonth(),t.getDate())) ? new Date(y+1,md.month-1,md.day) : d; }
  function within(d,mode){ const t=new Date(); if(mode==='month'){ return d.getFullYear()===t.getFullYear() && d.getMonth()===t.getMonth(); } if(mode==='next30'){ return (d - t)/(1000*60*60*24) <= 30.0001 && (d-t)>=0; } return true; }
  function fullName(c){ return [c.first||'',c.last||''].filter(Boolean).join(' ').trim(); }
  function addrLines(c){ const a1=c.address||''; const a2=[c.city||'', c.state||'', c.zip||''].filter(Boolean).join(', '); return [a1,a2].filter(x=>x && x.trim().length>0); }
  async function renderPrint(){ const view=$('#view-print'); if(!view||view.classList.contains('hidden')) return; await openDB(); const contacts=await dbGetAll('contacts'); const type=$('#print-type').value; const range=$('#print-range').value; const cols=parseInt($('#print-cols').value,10)||3; const addr=$('#print-address').checked; const today=new Date(); const rows=[]; for(const c of contacts){ const b=getField(c,['birthday','extras.birthday']); const a=getField(c,['anniversary','extras.anniversary']); const wantB=(type==='birthdays'||type==='both'); const wantA=(type==='anniversaries'||type==='both'); if(wantB && b){ const md=parseMD(b); if(md){ const d=nextOcc(md,today); if(within(d,range)) rows.push({kind:'Birthday',date:d,md,contact:c}); } } if(wantA && a){ const md=parseMD(a); if(md){ const d=nextOcc(md,today); if(within(d,range)) rows.push({kind:'Anniversary',date:d,md,contact:c}); } } } rows.sort((x,y)=> x.date - y.date || fullName(x.contact).localeCompare(fullName(y.contact))); const grid=$('#print-area'); const summary=$('#print-summary'); grid.className='print-grid cols-'+cols; summary.textContent = rows.length? `${rows.length} card(s) generated` : 'No matches for the chosen filters.'; grid.innerHTML = rows.map(r=>{ const c=r.contact; const lines=[`<div class="print-card-kind">${r.kind}</div>`,`<div class="print-card-name">${fullName(c)}</div>`,`<div class="print-card-date">${String(new Date(2000,r.md.month-1,r.md.day)).split(' ').slice(1,3).join(' ')}</div>`]; if(addr){ const a=addrLines(c); if(a.length) lines.push(`<div class="print-card-addr">${a.map(x=>x.replace(/&/g,'&amp;').replace(/</g,'&lt;')).join('<br>')}</div>`); } return `<div class="print-card">${lines.join('')}</div>`; }).join(''); }
  function wire(){ ['#btn-print-generate','#print-type','#print-range','#print-cols','#print-address'].forEach(sel=>{ const el=$(sel); if(!el || el.__wired) return; el.__wired=true; el.addEventListener('click', renderPrint); el.addEventListener('change', renderPrint); }); const pr=$('#btn-print'); if(pr && !pr.__wired){ pr.__wired=true; pr.addEventListener('click', ()=> window.print()); } }
  function patch(){ const orig=window.renderAll; if(!orig || orig.__wrappedPrint) return; const wrap = async function(){ await orig(); wire(); await renderPrint(); }; wrap.__wrappedPrint=true; window.renderAll = wrap; }
  document.addEventListener('DOMContentLoaded', patch);
})();
