// qa.js â€” Phase 9
(function(){
  function row(label,value){ return `<div class="row" style="justify-content:space-between"><div>${label}</div><strong>${value}</strong></div>`; }
  async function qaSweep(){ await openDB(); const cs=await dbGetAll('contacts'); const ps=await dbGetAll('partners'); const pids=new Set(ps.map(p=>p.id)); const CANON=new Set(['application','processing','underwriting','approved','cleared-to-close','funded','post-close','nurture','lost','denied']); let orphan=0, missing=0, bad=0, zero=0, dupE=0, dupP=0; const E=new Map(), P=new Map(); const normPhone=s=> String(s||'').replace(/\D+/g,''); const lower=s=> String(s||'').toLowerCase(); cs.forEach(c=>{ if(!c.first||!c.last) missing++; if(c.buyerPartnerId && !pids.has(c.buyerPartnerId)) orphan++; if(!CANON.has(String(c.stage||'').toLowerCase())) bad++; if(!(Number(c.loanAmount||0)>0)) zero++; E.set(lower(c.email), (E.get(lower(c.email))||0)+1); P.set(normPhone(c.phone), (P.get(normPhone(c.phone))||0)+1); }); dupE = Array.from(E.values()).filter(v=>v>1).length; dupP = Array.from(P.values()).filter(v=>v>1).length; const funded=cs.filter(c=> String(c.stage||'').toLowerCase()==='funded'); const open=cs.filter(c=> ['application','processing','underwriting','approved','cleared-to-close'].includes(String(c.stage||'').toLowerCase())); return { totals:{contacts:cs.length, partners:ps.length, funded:funded.length, open:open.length}, issues:{orphan, missing, bad, zero, dupEmail:dupE, dupPhone:dupP} }; }
  async function renderQA(){ const box=$('#qa-output'); if(!box) return; const {totals,issues}=await qaSweep(); box.innerHTML = `<div class="card"><h3>QA Summary</h3>${row('Contacts', totals.contacts)}${row('Partners', totals.partners)}${row('Open Pipeline', totals.open)}${row('Funded', totals.funded)}<h4 style="margin-top:8px">Potential Issues</h4>${row('Orphan partner links', issues.orphan)}${row('Missing first/last name', issues.missing)}${row('Unknown stage', issues.bad)}${row('Missing/zero loan amount', issues.zero)}${row('Duplicate emails (counts>1)', issues.dupEmail)}${row('Duplicate phones (counts>1)', issues.dupPhone)}</div>`; }
  async function loadDemo(){ const res=await fetch('fixtures/demo_pack.json').then(r=>r.json()).catch(()=>null); if(!res) return toast('Demo pack missing'); await dbRestoreAll(res,'replace'); toast('Demo data loaded'); await renderAll(); await renderQA(); }
  function wire(){ const b1=$('#btn-load-demo'); const b2=$('#btn-run-qa'); if(b1 && !b1.__wired){ b1.__wired=true; b1.addEventListener('click', loadDemo);} if(b2 && !b2.__wired){ b2.__wired=true; b2.addEventListener('click', renderQA);} }
  document.addEventListener('DOMContentLoaded', ()=>{ wire(); renderQA().catch(()=>{}); });
})();
